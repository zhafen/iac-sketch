# There is no "true" most-general way to define data. There are advantages and
# disadvantages to each formulation. Instead what we want are a few workable
# components. When helpful, one can convert between them or define new formulations.
# *Why* is there no unique representation? There is only one physical object, so
# we should be able to just represent it with the coordinates of each of the atoms.
# However, this is impractical. First, we don't even know what this is. It's very hard
# to measure. Second, even if we knew what this was, we would need to perform a
# calculation to get what we wanted to know about it to accomplish our objective.

# Fundamental components
component:
- component
- description: >
    If an entity has a "component" component, then it can be a component itself.
    A requirement for components is that if they require another entity
    for their definition, then that entity must be a component of the component.
    Alternatively, a would-be component can be part of a parent component alongside
    the component it depends on.

description:
- component
- description: Widely-used component that describes the entity in question.
- value: str

data:
- component
- description: >
    Special component used to define data associated with instances of a component.
    Any entity that owns a data component is assumed to be a component itself.

value:
- component
- description: >
    If an entity/component has a "value" then this component describes
    the type for that value. In the data this is represented as a field with the same
    name as the entity.
- value: str

# Relationship components

source:
- component
- description: A source entity used for describing relationships.
- value: entity

target:
- component
- description: A target entity used for describing relationships.
- value: entity

link:
- component
- description: >
    A component that describes a directed edge between two entities. This formulation
    of a link is the formulation expected by D3.
- data:
    source [source]: The source entity.
    target [target]: The target entity.

links:
- component
- description: >
    A description of multiple links, using the syntax:
      source --> target
      second_source --> second_target
- data:
    graph [str]: A graph describing the links.
    type [link_type]: >
      The type of the links. Must be a component that has either a source and target
      component or a link component.

alternative_to:
- component
- description: >
    If an entity has this component, then the entity is an alternative to the component
    stored in the value.
- value: entity

dependency:
- component
- description: Indicates that the target depends on the source.
- data:
    source [source]: Source entity.
    target [target]: Target entity.

data_flow:
- component
- description: >
    Describes a relationship between source and target where source provides data to
    the target.
- data:
    source [source]: Entity outputting data.
    target [target]: Entity accepting data.
    data [entity]: The data being passed between entities.

# Descriptive components

task:
- component

requirement:
- component

state:
- component
- description: "Progress state of the entity."
- value: str
