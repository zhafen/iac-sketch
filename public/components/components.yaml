# Fundamental components
component:
- component
- description: >
    If an entity has a "component" component, then it can be a component itself.
    A requirement for components is that if they require another entity
    for their definition, then that entity must be a component of the component.
    Alternatively, a would-be component can be part of a parent component alongside
    the component it depends on.

description:
- component
- description: Widely-used component that describes the entity in question.
- value: str

fields:
- component
- description: >
    Special component used to define attributes, each of which is a required component.
      field_name [type of component]: description

value:
- component
- description: >
    If an entity/component has a "value" then this component describes
    the type for that value. In the data this is represented as a field with the same
    name as the entity.
- value: str

# Relationship components

- I want to provide alternate ways to describe relationships
- If I require each link to have a type, how are the type components defined?
- If I have links component, how do I map it to the link component?


link:
- component
- description: >
    A component that describes a generic link between two entities.
    Link formulation A.
- fields:
    source [entity]: The source entity.
    target [entity]: The target entity.

link:
- component
- description: >
    A component that describes a generic link between two entities.
    Link formulation B.
- fields:
    source [entity]: The source entity.
    target [entity]: The target entity.
    link_type [entity]: The link type entity.

link_type:
- component
- description: >
    If a component has this component, then it describes a relationship.

dependency:
- component
- description: Indicates a dependency. Dependency formulation A.
- value: link

dependency:
- component
- description: Indicates a dependency. Dependency formulation A.
- fields:
    source [entity]: Source entity.
    target [entity]: Target entity.

dependency:
- component
- link_type
- description: Indicates a dependency. Dependency formulation C.

three_way_link:
- component
- fields:
    first_entity [entity]: The first entity.
    second_entity [entity]: The second entity.
    third_entity [entity]: The third entity.

three_way_link:
- component
- 


links:
- component
- description: >
    A description of multiple links, using the syntax:
      source --> target
      second_source --> second_target
- fields:
    graph [str]: A graph describing the links.
    type [link_type]: >
      The type of the links. Must be a component that has either a source and target
      component or a link component.
- representation: [link]

linked:
- component
- description: A list of entities that are fully connected.
- fields:
    entities [list[entity]]: The list of connected entities.
    type [link_type]: >
      The type of the links. Must be a component that has either a source and target
      component or a link component.
- representation: [link]
- representation: [links]

representation:
- component
- description: >
    If an entity has a representation component that means it can be represented by
    a combination of the components in the list.
- value: [entity]

representation_of:
- component
- description: This indicates that this is a representation of the entity.
- value: entity

relationship_representations:
- component
- description: A list of all the representations for relationships.
- links:
    - graph:
        - [source, target, link_type]
        - link
        - links
        - linked
    - type: representation

# Descriptive components

task:
- component

dependency:
- component
- link_type
- description: A relationship where the target entity depends on the source entity.

requirement:
- component

state:
- component
- description: "Progress state of the entity."
- value: str
