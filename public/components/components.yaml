# There is no "true" most-general way to define data. There are advantages and
# disadvantages to each formulation. Instead what we want are a few workable
# components. When helpful, one can convert between them or define new formulations.
# *Why* is there no unique representation? There is only one physical object, so
# we should be able to just represent it with the coordinates of each of the atoms.
# However, this is impractical. First, we don't even know what this is. It's very hard
# to measure. Second, even if we knew what this was, we would need to perform a
# calculation to get what we wanted to know about it to accomplish our objective.

# Fundamental components
component:
- component
- description: >
    If an entity has a "component" component, then it can be a component itself.
    A requirement for components is that if they require another entity
    for their definition, then that entity must be a component of the component.
    Alternatively, a would-be component can be part of a parent component alongside
    the component it depends on.
- tag

description:
- component
- description: Widely-used component that describes the entity in question.
- value: str

data:
- component
- description: >
    Component used to define data associated with instances of a component.
    Any entity that owns a data component is assumed to be a component itself.

value:
- component
- description: >
    If an entity/component has a "value" then this component describes
    the type for that value. In the data this is represented as a field with the same
    name as the entity.
- value: str

case:
- component
- description: >
    Component used to document if/elif/else statements.
- data:
    input [str]: Component entity that is the input for the case statement.
    cases [dict[str, str]]: Case statement. Can be nested.

# Relationship components

source:
- component
- description: A source entity used for describing relationships.
- value: entity

target:
- component
- description: A target entity used for describing relationships.
- value: entity

links:
- component
- description: >
    A description of multiple links, using the syntax:
      source --> target
      second_source --> second_target
- data:
    edges [str]: A string that describes the edges, in the 
    link_type [entity]: >
      The type of the links. Must be a component that has either a source and target
      component or a link component.

link:
- component
- description: >
    A component that describes a generic link between two entities.
- data:
    source [source]: The source entity.
    target [target]: The target entity.

dependency:
- component
- description: Indicates that the target depends on the source.
- data:
    source [source]: Source entity.
    target [target]: Target entity.
    data [data]: >
      The types and descriptions for any data being passed between entities.
      Subtlety: by including data as one of the component fields, all instances of
      a dependency are themselves a component definition. This is good, because
      the different instances of the component describe different instances of the
      dependency in action.

alternative_to:
- component
- description: >
    If an entity has this component, then the entity is an alternative to the component
    stored in the value.
- value: entity

references:
- component
- description: Describes relationships between fields in components
- value: str

# Descriptive components

tag:
- component
- description: >
    When a component owns a tag component as part of its definition, then the component
    describes information on how the owning entity should be treated.

task:
- component
- description: If owned, the entity is a task to complete.
- tag

workflow:
- component
- descrition: If owned, the entity describes a series of tasks to run in order.

trigger:
- component
- description: If owned, the entity can be triggered by the event described.
- tag
- value: str

requirement:
- component
- description: If owned, the owner is mandated for the system to function.
- tag

status:
- component
- description: "Progress status for the entity."
- value: str

time_dependent:
- component
- description: Description of how the data depends on time.
- data:
    scd_type [categorical]:
        description: Slowly-changing dimension type.
        default: Type II
