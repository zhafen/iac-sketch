iac_sketch_infrastructure:
- description: The iac_sketch package code.
- infrastructure

is_a_useful_product:
- description: Fundamentally, iac_sketch must serve a purpose.
- requirement: iac_sketch_infrastructure

records_system_architecture:
- requirement
- parent: is_a_useful_product

facilitates_system_design:
- requirement
- parent: is_a_useful_product

enables_iterative_system_decomposition:
- description: >
    The requirements and components of complicated systems are rarely known all at
    once, but are assembled over time in an iterative process. This process includes
    gathering functional requirements from the stakeholders, identifying technical
    requirements/constraints, trial and error, and more. One of the goals of
    iac_sketch is to provide a constant, living source of truth that can be used for
    both the formalized design and also components and requirements not yet
    incorporated.
- requirement
- parent: facilitates_system_design

facilitates_a_source_of_truth:
- requirement
- parent: enables_iterative_system_decomposition

can_incorporate_poorly_formed_components:
- requirement
- parent: enables_iterative_system_decomposition

validates_system_architecture:
- description: >
    iac_sketch must provide a series of automated tests that ensure the system
    architecture meets requirements.
- requirement
- parent: is_a_useful_product

documents_system_architecture:
- description: >
    At any given time the code that defines the system must be able to be compiled and
    turned into a digestable, clear, format.
- requirement
- parent: is_a_useful_product

is_not_confusing_to_use:
- requirement: iac_sketch_infrastructure
- todo: >
    Unfortunately, "system" and "component" are used in two different contexts
    currently--as part of system design (where components are pieces of a system)
    and as part of entity-component-system (where components are data).

can_perform_registry_etl:
- description: iac_sketch must perform ETL on the manifest, returning a registry.

can_execute_tests:
- description: iac_sketch must run all tests that validate requirements.

can_document_workflows:
- description: iac_sketch must provide a method to document workflows.

minimizes_structure_repetition:
- description: >
    iac_sketch should not require the user to go through code and transcribe the
    structure into yaml when it's already defined.

    Possible solutions:
    1. Automatically retrieve structure from the code.
    2. Use the structure in the yaml to define code execution order
- requirement: iac_sketch_infrastructure

perform_registry_etl:
- description: >
    How entities are defined and parsed.
    When entities are defined, their definitions depend on existing entities.
    We want to create all entities in order, such that their dependencies
    are resolved first. This is the mathematical problem of topological
    sorting, and networkx can solve this problem.
- task
- satisfies: can_perform_registry_etl
- links:
    links: |
        extract_entities --> load_entities_to_registry
        load_entities_to_registry --> apply_preprocess_transforms
        apply_preprocess_transforms --> apply_system_transforms
        apply_system_transforms --> apply_postprocess_transforms

extract_entities:
- description: Load the entities.
- task
- parent: perform_registry_etl
- input:
    filename_patterns [list[str]]: Files matching these patterns are loaded.
    input_yaml [str]: Optional yaml-formatted input string.
- output:
    registry [registry]:
- child: extract_entities_from_yaml
- child: load_entities_to_registry

extract_entities_from_yaml:
- description: Read the entities from a yaml string or stream.
- task
- input:
    input_yaml [str]: 
    source [str]: Optional label of where the yaml came from.
- output:
    registry [registry]: 
- child: parse_components_list
- code: iac_sketch.etl.ExtractSystem.extract_entities_from_yaml

parse_components_list:
- description: Convert a dictionary containing components into a list of components.
- task
- input:
    entity [str]: Name of the entity associated with the components.
    comps [list]: The components themselves, as a dictionary.
    source [str]: Optional label of where the yaml came from.
- output:
    extracted_comps [list[dict]]: Parsed version of the components.
- code: iac_sketch.etl.ExtractSystem.parse_components_list

load_entities_to_registry:
- task
- input:
    entities [dataframe]:
- output:
    registry [registry]:

load_entities_to_registry:
- description: >
    An object containing all the components. At the core of the registry are the
    components, a dictionary containing one dataframe per component type,
    with one row per component instance.
- task
- input:
    entities [dataframe]: >
        DataFrame containing entities, with one row per component instance.
- output:
    registry [registry]: >
        An object containing all the components. At the core of the registry are the
        components, a dictionary containing one dataframe per component type,
        with one row per component instance.

apply_preprocess_transforms:
- description: >
    Applies a set of required transforms to components that must always occur
    before any other transforms.
- task
- links:
    links: |
        normalize_compinsts --> extract_compdefs
        extract_compdefs --> validate_compinsts
    link_type: depended_on_by

apply_system_transforms:
- description: >
    Applies a set of system-defined transforms.
- task

normalize_components:
- task
- input:
    registry [registry]: Registry containing component instances to format.
- output:
    registry [registry]: Registry containing formatted instances.

extract_compdefs:
- task
- input:
    registry [registry]: Registry containing unparsed component definitions.
- output:
    registry [registry]: Registry containing extracted component definitions.

validate_compinsts:
- task
- input:
    registry [registry]: Registry containing unconstrained compinsts.
- output:
    registry [registry]: Registry containing compinsts with compdefs applied.

apply_transforms:
- task
- links: |
            get_transform_order --> apply_transform

get_transform_order:
- task

apply_transform:
- task