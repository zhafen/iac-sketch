# There is no "true" most-general way to define data. There are advantages and
# disadvantages to each formulation. Instead what we want are a few workable
# components. When helpful, one can convert between them or define new formulations.
# *Why* is there no unique representation? There is only one physical object, so
# we should be able to just represent it with the coordinates of each of the atoms.
# However, this is impractical. First, we don't even know what this is. It's very hard
# to measure. Second, even if we knew what this was, we would need to perform a
# calculation to get what we wanted to know about it to accomplish our objective.
# Accessing the data as formatted for calculation may be fundamentally why there's
# not a single definition that's best.

# Fundamental components
component:
- component:
    multiplicity: "1"
- description: >
    If an entity has a "component" component, then it can be a component itself.
    A requirement for components is that if they require another entity
    for their definition, then that entity must be a component of the component.
    Alternatively, a would-be component can be part of a parent component alongside
    the component it depends on.

    A note on terms.
    component definitions (compdef): How a component is defined.
    component instances (compinst): An instance of a component.
    entities: A collection of component instances.

    We re-use these terms so frequently that there are shorthands for them.
    Strictly speaking, we could just use "components" to refer to component definitions
    and "entities" to refer to component instances, because entities are only ever
    a collection of component instances. In practice this is confusing.

- fields:
    multiplicity [str]:
        description: Allowed number of instances of a component per entity.
        default: "*"
    fields_comp_ind [int]: Component index for the data component
    unparsed_data [dict]: Field definitions in unparsed form.
    data [dict[str, field]]: Field definitions.
    valid_def [bool]: Whether or not the component has a valid definition.
    valid_def_message [str]: Message associated with the validity of the definition.
    valid_data [bool]: >
        Whether or not the data contained in the component table is valid.
    valid_data_message [str]: Message associated with data validity.

fulfills_all_requirements:
- description: All requirements must be met.
- requirement

test_fulfills_all_requirements:
- description: The code to test the "fulfills_all_requirements" requirement.
    We need a method to check that a given manifest fulfills all requirements.
- task

formatted_correctly:
- description: The manifest must be formatted correctly.
- requirement

test_formatted_correctly:
- description: The code to test the "formatted_correctly" requirement.
- task

fully_connected:
- description: >
    No entities can exist in isolation. They must relate to other entities in at least
    one or more ways.
- requirement

test_fully_connected:
- description: The code to test the "fully_connected" requirement.
- task

tasks_implemented:
- description: All tasks in the manifest must be implemented.
- requirement

test_tasks_implemented:
- description: The code to test the "tasks_implemented" requirement.
- task

handles_testcases:
- description:
- requirement

test_handles_testcases:
- description: The code to test the "handles_testcases" requirement.
- task

field:
- component
- description: A single attribute or column.
- fields:
    name [str]: Name of the field.
    type [entity]: Entity this field is an instance of.
    description [description]: A description of the field.
    multiplicity [str] = "0..*": "Number of instances of field. TODO: Delete?"
    default [entity]: Default value for the field

fields:
- component
- description: >
    Component used to define fields associated with instances of a component.
    Any entity that owns a fields component is assumed to be a component itself.

description:
- component
- description: Widely-used component that describes the entity in question.
- fields:
    description [str]: The actual field containing the description.

metadata:
- component:
    multiplicity: "1"
- description: Component that describes metadata about an entity.
- fields:
    n_comps [int]: >
        Number of components associated with an entity,
        including the metadata component
    source_file [str]: Path to the file containing the entity definition.

case:
- component
- description: >
    Component used to document if/elif/else statements.
- fields:
    case [dict[str, str]]: Case statement. Can be nested.
    input [input]: Component entity that is the input for the case statement.

# Relationship components

source:
- component
- description: A source entity used for describing relationships.
- fields:
    source [entity]:

target:
- component
- description: A target entity used for describing relationships.
- fields:
    target [entity]:

links:
- component
- description: >
    A description of multiple links, using the syntax:
      source --> target
      second_source --> second_target
- fields:
    links [str]: A string that describes the edges, in the 
    link_type [entity]: >
      The type of the links. Must be a component that has either a source and target
      component or a link component.

link:
- component
- description: >
    A component that describes a generic link between two entities.
- fields:
    source [source]: The source entity.
    target [target]: The target entity.
    link_type [entity]: The type of link.

link_type:
- component
- description: >
    Owner component entities can be represented as links. Acceptable formatting for
    a component instance can be e.g. "- my_link_type: entity", which means the 
    owner entity is the source and the indicated entity is the target.
    
- fields:
    source_description [description]: Description of what the source entity represents.
    target_description [description]: Description of what the target entity represents.

dependency:
- component
- description: Indicates that the target depends on the source.
- link_type

alternative:
- component
- description: >
    If an entity has this component, then the entity is an alternative to the
    indicated entity.
- link_type

# Descriptive components

tag:
- component
- description: >
    When a component owns a tag component as part of its definition, then the component
    describes information on how the owning entity should be treated.

task:
- description: If owned, the entity is a task to complete.

input:
- component
- description: Component representing input.
- fields:
    input [data]: >
        Input component instances for the task. Is of type "fields", so will be parsed
        in the same manner.

output:
- component
- description: Component representing output.
- fields:
    output [data]: >
        Output component instances for the task. Is of type "fields", so will be parsed
        in the same manner.

workflow:
- component
- description: If owned, the entity describes a series of tasks to run in order.

trigger:
- component
- description: If owned, the entity can be triggered by the event described.
- fields:
    trigger [entity]:

requirement:
- component
- description: If owned, the owner is mandated for the system to function.

status:
- component
- description: Implementation progress status for an entity.
- fields:
    status [categorical]:
        categories:
            - new
            - in design
            - in progress
            - in review
            - closed
            - removed

time_dependent:
- component
- description: Description of how the data depends on time.
- fields:
    scd_type [categorical]:
        description: Slowly-changing dimension type.
        default: Type II

timestamp:
- component
- description: A specific moment in time.
- fields:
    timestamp [str]: String representation of the timestamp.
    seconds [float]: Epoch time representation of the timestamp.
    timezone [categorical]: Timezone for the timestamp.

person:
- component
- description: An entity representing a person.
- fields:
    first_name [str]:
    last_name [str]:
    data_of_birth [timestamp]: