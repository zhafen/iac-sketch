# There is no "true" most-general way to define data. There are advantages and
# disadvantages to each formulation. Instead what we want are a few workable
# components. When helpful, one can convert between them or define new formulations.
# *Why* is there no unique representation? There is only one physical object, so
# we should be able to just represent it with the coordinates of each of the atoms.
# However, this is impractical. First, we don't even know what this is. It's very hard
# to measure. Second, even if we knew what this was, we would need to perform a
# calculation to get what we wanted to know about it to accomplish our objective.
# Accessing the data as formatted for calculation may be fundamentally why there's
# not a single definition that's best.

# Fundamental components

component:
- description: >
    If an entity has a "component" component, then it can be a component itself.
    A requirement for components is that if they require another entity
    for their definition, then that entity must be a component of the component.
    Alternatively, a would-be component can be part of a parent component alongside
    the component it depends on.

    A note on terms.
    component definitions (compdef): How a component is defined.
    component instances (compinst): An instance of a component.
    entities: A collection of component instances.

    We re-use these terms so frequently that there are shorthands for them.
    Strictly speaking, we could just use "components" to refer to component definitions
    and "entities" to refer to component instances, because entities are only ever
    a collection of component instances. In practice this is confusing.
- component:
    multiplicity: "0..1"
- fields:
    multiplicity [str]:
        description: Allowed number of instances of a component per entity.
        default: "0..*"
        coerce: False
        categories:
            - "0..1"
            - "0..*"
            - "1..1"
            - "1..*"

field:
- description: A single attribute or column.
- component
- fields:
    name [str]: Name of the field.
    description [str]: Textual description of the column.
    dtype [str]: Datatype of the column for type-checking.
    nullable [bool] = False: Whether the column can contain null values.
    unique [bool] = False: Whether column values should be unique.
    report_duplicates [str] = 'all': >
        How to report unique errors. Options: 'exclude_first', 'exclude_last', 'all'.
    coerce [bool] = False: >
        If True, coerce the column to the specified dtype during validation.
    required [bool] = True: Whether the column must be present in the DataFrame.
    default [entity]: Default value for the field
    multiplicity [str] = '0..*': Number of instances of field.
    categories [list[str]]: Categories if the field is categorical.
    title [str]: Human-readable label for the column.
    metadata [dict]: Optional key-value metadata for the column.
    checks [str]: Checks to verify validity of the column.
    parsers [str]: Parsers to preprocess or validate the column.
    regex [bool] = False: Whether the name should be treated as a regex pattern.
    drop_invalid_rows [bool] = False: If True, drop invalid rows during validation.

fields:
- description: >
    The fields component shows up when we are creating a component, and is used to
    define columns.
- component:
    multiplicity: "0..1"

compdef:
- description: >
    Definitions for a component. Derived from the components "component" and "fields".
- component:
    multiplicity: "0..1"
- fields:
    fields [dict[str, field]]: Field definitions.
    unparsed_fields [dict]: Field definitions in unparsed form.
    is_defined [bool]: Whether or not the component is defined.
    is_valid [bool]: Whether or not the component definition is valid.
    errors [str]: Message associated with the validity of the definition.
    multiplicity [str]:
        description: Allowed number of instances of a component per entity.
        default: "0..*"
        coerce: True
        categories:
            - "0..1"
            - "0..*"
            - "1..1"
            - "1..*"

compinst:
- description: >
    We derive the compinst component from every single component. It's the simplest
    possible mapping between entities and components. This is very helpful as a catalog
    of what components exist, and is updated when modifying components.
- component:
    - multiplicity: "0..*"
- fields:
    component_type [str]: The type of the component.

default_fields:
- description: This entity contains the default fields that exist for components.
- fields:
    entity [str]:
        description: The entity associated with the component.
        nullable: False
    comp_key [int]:
        description: |
            The index of the component, amongst the components that define the entity.
        nullable: False
        coerce: True

description:
- description: Widely-used component that describes the entity in question.
- component:
    multiplicity: "0..1"
- fields:
    description [str]: The actual field containing the description.

metadata:
- description: Component that describes metadata about an entity.
- component:
    multiplicity: "0..1"
- fields:
    n_comps [int]: >
        Number of components associated with an entity,
        including the metadata component
    source_file [str]: Path to the file containing the entity definition.